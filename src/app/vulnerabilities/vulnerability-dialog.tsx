"use client"

import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Vulnerability } from "./types"
import { useEffect } from "react"
import { useForm, ControllerRenderProps } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Badge } from "@/components/ui/badge"
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form"
import { formatDate, getStateColor } from "@/lib/utils"
import { Form } from "@/components/ui/form"

const vulnerabilitySchema = z.object({
  id: z.union([z.string(), z.number()]).optional().transform(val => 
    val ? val.toString() : ''
  ),
  title: z.string().min(1, "Title is required"),
  severity: z.enum(['Low', 'Medium', 'High', 'Critical']),
  description: z.string().min(1, "Description is required"),
  cwe: z.string()
    .min(1, "CWE is required")
    .regex(/^CWE-\d+$/, "CWE must be in format CWE-XXX"),
  affectedComponent: z.string().min(1, "Affected Component is required"),
  technicalImpact: z.string().max(1000).optional(),
  poc: z.string().max(2000).optional(),
  reporter: z.string().optional(),
  state: z.enum(['Open', 'In Progress', 'Fixed', 'Closed', "Won't Fix", 'Resurfaced']).default('Open'),
  suggestedFix: z.string().nullable().optional(),
  workarounds: z.string().nullable().optional(),
  impact: z.string().min(1, "Impact is required"),
  reportedDate: z.string().optional(),
  lastUpdatedDate: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  completeState: z.object({
    currentState: z.enum(['Open', 'In Progress', 'Fixed', 'Closed', "Won't Fix", 'Resurfaced']),
    possibleNextStates: z.array(
      z.enum(['Open', 'In Progress', 'Fixed', 'Closed', "Won't Fix", 'Resurfaced'])
    )
  }).optional()
})

type VulnerabilityFormData = z.infer<typeof vulnerabilitySchema>

interface VulnerabilityDialogProps {
  vulnerability: Vulnerability | null
  open: boolean
  onOpenChange: (open: boolean) => void
  mode: 'create' | 'edit' | 'view'
  onSave?: (vulnerability: Vulnerability) => void
}

export function VulnerabilityDialog({
  vulnerability,
  open,
  onOpenChange,
  mode,
  onSave
}: VulnerabilityDialogProps) {
  const form = useForm<VulnerabilityFormData>({
    resolver: zodResolver(vulnerabilitySchema),
    defaultValues: vulnerability || undefined
  })

  useEffect(() => {
    if (vulnerability) {
      form.reset(vulnerability)
    }
  }, [vulnerability, form])

  const onSubmit = (data: VulnerabilityFormData) => {
    console.log('Form data:', data);
    console.log('Form errors:', form.formState.errors);
    
    const now = new Date().toISOString();
    
    if (mode === 'create') {
      const newVulnerability = {
        ...data,
        reportedDate: now,
        lastUpdatedDate: now,
        createdAt: now,
        updatedAt: now,
        completeState: {
          currentState: data.state || 'Open',
          possibleNextStates: ['Open', 'In Progress', 'Fixed', 'Closed', "Won't Fix", "Resurfaced"]
        }
      };
      onSave?.(newVulnerability as Vulnerability);
    } else {
      onSave?.({
        ...data,
        id: data.id?.toString() || '',
        reportedDate: data.reportedDate || now,
        lastUpdatedDate: now,
        createdAt: data.createdAt || now,
        updatedAt: now,
        completeState: vulnerability?.completeState || {
          currentState: 'Open',
          possibleNextStates: ['Open', 'In Progress', 'Fixed', 'Closed', "Won't Fix", "Resurfaced"]
        }
      } as Vulnerability);
    }
    onOpenChange(false);
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center gap-2">
            <DialogTitle>
              {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'} Vulnerability
            </DialogTitle>
            {mode !== 'create' && (
              <Badge className={`${getStateColor(form.getValues("state"))} border-0`}>
                {form.getValues("state")}
              </Badge>
            )}
          </div>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="title">Title</Label>
                {mode === 'view' ? (
                  <p className="p-2 rounded-md bg-gray-50">{form.getValues("title")}</p>
                ) : (
                  <Input
                    {...form.register("title")}
                  />
                )}
                {form.formState.errors.title && (
                  <p className="text-sm text-red-500">{form.formState.errors.title.message}</p>
                )}
              </div>
              <div className="space-y-2">
                <FormField
                  control={form.control}
                  name="severity"
                  render={({ field }: { field: ControllerRenderProps<VulnerabilityFormData, "severity"> }) => (
                    <FormItem>
                      <FormLabel>Severity</FormLabel>
                      {mode === 'view' ? (
                        <p className="p-2 rounded-md bg-gray-50">{field.value}</p>
                      ) : (
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select severity" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Low">Low</SelectItem>
                            <SelectItem value="Medium">Medium</SelectItem>
                            <SelectItem value="High">High</SelectItem>
                            <SelectItem value="Critical">Critical</SelectItem>
                          </SelectContent>
                        </Select>
                      )}
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              {mode === 'view' ? (
                <p className="p-2 rounded-md bg-gray-50 whitespace-pre-wrap">{form.getValues("description")}</p>
              ) : (
                <Textarea
                  {...form.register("description")}
                />
              )}
              {form.formState.errors.description && (
                <p className="text-sm text-red-500">{form.formState.errors.description.message}</p>
              )}
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="cwe">CWE</Label>
                {mode === 'view' ? (
                  <p className="p-2 rounded-md bg-gray-50">{form.getValues("cwe")}</p>
                ) : (
                  <Input
                    {...form.register("cwe")}
                  />
                )}
                {form.formState.errors.cwe && (
                  <p className="text-sm text-red-500">{form.formState.errors.cwe.message}</p>
                )}
              </div>
              <div className="space-y-2">
                <Label htmlFor="affectedComponent">Affected Component</Label>
                {mode === 'view' ? (
                  <p className="p-2 rounded-md bg-gray-50">{form.getValues("affectedComponent")}</p>
                ) : (
                  <Input
                    {...form.register("affectedComponent")}
                  />
                )}
                {form.formState.errors.affectedComponent && (
                  <p className="text-sm text-red-500">{form.formState.errors.affectedComponent.message}</p>
                )}
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="technicalImpact">Technical Impact</Label>
                {mode === 'view' ? (
                  <p className="p-2 rounded-md bg-gray-50 whitespace-pre-wrap">{form.getValues("technicalImpact")}</p>
                ) : (
                  <Textarea
                    {...form.register("technicalImpact")}
                  />
                )}
                {form.formState.errors.technicalImpact && (
                  <p className="text-sm text-red-500">{form.formState.errors.technicalImpact.message}</p>
                )}
              </div>
              <div className="space-y-2">
                <Label htmlFor="poc">Proof of Concept</Label>
                {mode === 'view' ? (
                  <p className="p-2 rounded-md bg-gray-50 whitespace-pre-wrap">{form.getValues("poc")}</p>
                ) : (
                  <Textarea
                    {...form.register("poc")}
                  />
                )}
                {form.formState.errors.poc && (
                  <p className="text-sm text-red-500">{form.formState.errors.poc.message}</p>
                )}
              </div>
            </div>
            {mode !== 'create' && (
              <>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="suggestedFix">Suggested Fix</Label>
                    {mode === 'view' ? (
                      <p className="p-2 rounded-md bg-gray-50 whitespace-pre-wrap">{form.getValues("suggestedFix")}</p>
                    ) : (
                      <Textarea
                        {...form.register("suggestedFix")}
                      />
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="workarounds">Workarounds</Label>
                    {mode === 'view' ? (
                      <p className="p-2 rounded-md bg-gray-50 whitespace-pre-wrap">{form.getValues("workarounds")}</p>
                    ) : (
                      <Textarea
                        {...form.register("workarounds")}
                      />
                    )}
                  </div>
                </div>
              </>
            )}

            <div className="space-y-2">
              <Label htmlFor="impact">Impact</Label>
              {mode === 'view' ? (
                <p className="p-2 rounded-md bg-gray-50 whitespace-pre-wrap">{form.getValues("impact")}</p>
              ) : (
                <Textarea
                  {...form.register("impact")}
                />
              )}
              {form.formState.errors.impact && (
                <p className="text-sm text-red-500">{form.formState.errors.impact.message}</p>
              )}
            </div>

            {mode !== 'create' && (
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="reportedDate">Reported Date</Label>
                  <p className="p-2 rounded-md bg-gray-50">
                    {formatDate(form.getValues("reportedDate"))}
                  </p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="lastUpdatedDate">Last Updated</Label>
                  <p className="p-2 rounded-md bg-gray-50">
                    {formatDate(form.getValues("lastUpdatedDate"))}
                  </p>
                </div>
              </div>
            )}

            <div className="flex justify-end space-x-2">
              {mode === 'view' ? (
                <Button type="button" onClick={() => onOpenChange(false)}>
                  Close
                </Button>
              ) : (
                <>
                  <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                    Cancel
                  </Button>
                  <Button type="submit">Save</Button>
                </>
              )}
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
} 