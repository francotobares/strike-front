import { describe, it, expect, vi } from 'vitest'
import { render, screen, fireEvent } from '@testing-library/react'
import { VulnerabilityDialog } from '../vulnerability-dialog'
import { Vulnerability } from '../types'

const mockVulnerability = {
  id: '1',
  title: 'Test Vulnerability',
  description: 'Test Description',
  severity: 'High' as const,
  cwe: 'CWE-123',
  affectedComponent: 'Test Component',
  technicalImpact: 'Test Impact',
  reportedDate: new Date().toISOString(),
  lastUpdatedDate: new Date().toISOString(),
  reporter: 'Test Reporter',
  impact: 'Test Impact',
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  completeState: {
    currentState: 'Open' as const,
    possibleNextStates: ['Open', 'In Progress', 'Fixed', 'Closed', "Won't Fix", "Resurfaced"] as const
  }
} as Vulnerability

describe('VulnerabilityDialog', () => {
  it('renders in view mode correctly', () => {
    render(
      <VulnerabilityDialog
        mode="view"
        vulnerability={mockVulnerability}
        open={true}
        onOpenChange={() => {}}
      />
    )

    expect(screen.getByText('View Vulnerability')).toBeInTheDocument()
    expect(screen.getByText('Test Vulnerability')).toBeInTheDocument()
  })

  it('renders in edit mode with editable fields', () => {
    render(
      <VulnerabilityDialog
        vulnerability={mockVulnerability}
        open={true}
        onOpenChange={() => {}}
        mode="edit"
      />
    )
    
    expect(screen.getByText('Edit Vulnerability')).toBeInTheDocument()
    expect(screen.getByDisplayValue('Test Vulnerability')).not.toBeDisabled()
  })

  it('validates required fields in create mode', async () => {
    const onSave = vi.fn()
    render(
      <VulnerabilityDialog
        vulnerability={{ ...mockVulnerability, title: '' }}
        open={true}
        onOpenChange={() => {}}
        mode="create"
        onSave={onSave}
      />
    )

    fireEvent.click(screen.getByText('Save'))
    
    expect(await screen.findByText('Title is required')).toBeInTheDocument()
    expect(onSave).not.toHaveBeenCalled()
  })

  it('calls onSave with updated data when form is valid', async () => {
    const onSave = vi.fn()
    render(
      <VulnerabilityDialog
        vulnerability={mockVulnerability}
        open={true}
        onOpenChange={() => {}}
        mode="edit"
        onSave={onSave}
      />
    )

    fireEvent.click(screen.getByText('Save'))
    
    await vi.waitFor(() => {
      expect(onSave).toHaveBeenCalledWith(expect.objectContaining({
        title: 'Test Vulnerability',
        severity: 'High'
      }))
    })
  })
}) 